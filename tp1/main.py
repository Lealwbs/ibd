# -*- coding: utf-8 -*-
"""IBD_TP1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16Zj4BFKqS4z3VPWTxYxX5PhH5mdiVjz_

# **Importação da Biblioteca**  `duckdb`  **e declaração das funções**
"""

import duckdb

def query(queryStr):
  result = duckdb.query(queryStr).to_df()
  return result

def printQuery(queryStr):
  print(query(queryStr))
  print("\n")
  print("---------------------------------------------------------\n")

"""# **Criação do esquema do Banco de Dados**"""

duckdb.sql("""
CREATE TABLE IF NOT EXISTS filmes (
  id INTEGER PRIMARY KEY,
  titulo TEXT NOT NULL,
  genero TEXT,
  duracao INTEGER,
  classificacao_indicativa INTEGER
  );
""")

duckdb.sql("""
CREATE TABLE IF NOT EXISTS salas (
  id INTEGER PRIMARY KEY,
  nome TEXT NOT NULL,
  capacidade INTEGER
  );
""")

duckdb.sql("""
CREATE TABLE IF NOT EXISTS sessoes (
  id INTEGER PRIMARY KEY ,
  filme_id INTEGER NOT NULL,
  sala_id INTEGER NOT NULL,
  data_hora DATETIME NOT NULL,
  preco_ingresso DECIMAL(10,2) NOT NULL,
  FOREIGN KEY (filme_id) REFERENCES filmes(id),
  FOREIGN KEY (sala_id) REFERENCES salas(id)
  );
""")

duckdb.sql("""
CREATE TABLE IF NOT EXISTS clientes (
  id INTEGER PRIMARY KEY,
  nome TEXT NOT NULL,
  email TEXT,
  data_nascimento DATE
  );
""")

duckdb.sql("""
CREATE TABLE IF NOT EXISTS ingressos (
id INTEGER PRIMARY KEY,
sessao_id INTEGER NOT NULL,
cliente_id INTEGER NOT NULL,
data_compra DATETIME NOT NULL,
FOREIGN KEY (sessao_id) REFERENCES sessoes(id),
FOREIGN KEY (cliente_id) REFERENCES clientes(id)
);
""")

"""# **Popular as tabelas com dados mockados**"""

# É necessário dar Truncate para limpar e repopular novamente as tabelas
# A ordem dos Truncates é necessária para limpar as tabelas devido às restrições

duckdb.sql("""TRUNCATE TABLE ingressos""")
duckdb.sql("""TRUNCATE TABLE sessoes""")
duckdb.sql("""TRUNCATE TABLE filmes""")
duckdb.sql("""TRUNCATE TABLE salas""")
duckdb.sql("""TRUNCATE TABLE clientes""")

duckdb.sql("""
  INSERT INTO filmes (id, titulo, genero, duracao, classificacao_indicativa) VALUES
  (1, 'Vingadores: Ultimato', 'Acao', 181, 12),
  (2, 'O Rei Leao', 'Animacao', 118, 0),
  (3, 'Coringa', 'Drama', 122, 16),
  (4, 'Parasita', 'Suspense', 132, 16),
  (5, 'Minha Mae e uma Peca 3', 'Comedia', 111, 12),
  (6, 'Velozes e Furiosos 9', 'Acao', 145, 14),
  (7, 'Divertida Mente', 'Animacao', 95, 0),
  (8, 'A Origem', 'Ficcao Cientifica', 148, 14),
  (9, 'Se Beber, Nao Case!', 'Comedia', 100, 16),
  (10, 'Interestelar', 'Ficcao Cientifica', 169, 10),
  (11, 'Matrix', 'Acao', 136, 14),
  (12, 'O Poderoso Chefao', 'Drama', 175, 16),
  (13, 'Cidade de Deus', 'Drama', 130, 18),
  (14, 'Bacurau', 'Drama', 131, 16),
  (15, 'Mad Max: Estrada da Furia', 'Acao', 120, 16);
""")

duckdb.sql("""
  INSERT INTO salas (id, nome, capacidade) VALUES
  (1, 'Sala 1 IMAX', 250),
  (2, 'Sala 2 VIP', 80),
  (3, 'Sala 3 Dolby Atmos', 180),
  (4, 'Sala 4 Standard', 120),
  (5, 'Sala 5 Kids', 100),
  (6, 'Sala 6 XD', 200),
  (7, 'Sala 7 Comum', 160);
""")

duckdb.sql("""
  INSERT INTO sessoes (id, filme_id, sala_id, data_hora, preco_ingresso) VALUES
  (1, 1, 1, '2025-04-25 14:30:00', 35.50),
  (2, 2, 5, '2025-04-25 16:00:00', 25.00),
  (3, 3, 3, '2025-04-25 19:00:00', 30.00),
  (4, 1, 1, '2025-04-25 20:30:00', 35.50),
  (5, 5, 4, '2025-04-26 17:00:00', 28.00),
  (6, 6, 6, '2025-04-26 21:00:00', 40.00),
  (7, 4, 2, '2025-04-27 15:00:00', 45.00),
  (8, 7, 5, '2025-04-27 10:00:00', 22.00),
  (9, 8, 3, '2025-04-28 18:30:00', 32.00),
  (10, 9, 4, '2025-04-28 22:00:00', 26.00),
  (11, 1, 6, '2025-04-29 14:00:00', 38.00),
  (12, 3, 3, '2025-04-29 17:45:00', 30.00),
  (13, 5, 7, '2025-04-29 20:15:00', 27.00),
  (14, 10, 1, '2025-04-30 19:30:00', 36.00),
  (15, 11, 6, '2025-05-01 16:30:00', 39.00),
  (16, 12, 2, '2025-05-01 20:00:00', 48.00),
  (17, 13, 3, '2025-05-02 21:15:00', 33.00),
  (18, 14, 7, '2025-05-02 18:00:00', 29.00),
  (19, 15, 1, '2025-05-03 15:45:00', 37.00),
  (20, 1, 3, '2025-05-03 18:45:00', 34.00),
  (21, 5, 4, '2025-05-03 14:00:00', 28.00),
  (22, 7, 5, '2025-04-25 11:00:00', 22.00),
  (23, 1, 1, '2025-05-10 19:00:00', 35.50),
  (24, 12, 3, '2025-05-11 20:30:00', 33.00),
  (25, 13, 7, '2025-05-12 22:00:00', 29.00),
  (26, 9, 4, '2025-04-25 22:30:00', 26.00),
  (27, 8, 6, '2025-04-25 19:45:00', 38.00),
  (28, 14, 2, '2025-05-15 18:15:00', 45.00),
  (29, 15, 6, '2025-05-16 21:30:00', 40.00),
  (30, 11, 1, '2025-05-17 17:00:00', 39.00);
""")

duckdb.sql("""
  INSERT INTO clientes (id, nome, email, data_nascimento) VALUES
  (1, 'Ana Silva', 'ana.silva@email.com', '1990-05-15'),
  (2, 'Bruno Costa', 'bruno.costa@email.com', '1985-11-23'),
  (3, 'Carla Dias', 'carla.dias@email.com', '2000-01-30'),
  (4, 'Daniel Martins', 'daniel.martins@email.com', '1998-07-10'),
  (5, 'Eduarda Ferreira', 'eduarda.ferreira@email.com', '1995-03-03'),
  (6, 'Fabio Lima', 'fabio.lima@email.com', '1978-12-01'),
  (7, 'Gabriela Alves', 'gabriela.alves@email.com', '2002-09-18'),
  (8, 'Hugo Santos', 'hugo.santos@email.com', '1993-06-25'),
  (9, 'Isabela Pereira', 'isabela.pereira@email.com', '1980-02-14'),
  (10, 'Joao Oliveira', 'joao.oliveira@email.com', '1999-08-05');
""")

duckdb.sql("""
  INSERT INTO ingressos (id, sessao_id, cliente_id, data_compra) VALUES
  (1, 1, 1, '2025-04-24 10:15:00'),
  (2, 1, 2, '2025-04-24 11:30:00'),
  (3, 3, 3, '2025-04-25 09:00:00'),
  (4, 4, 1, '2025-04-25 10:00:00'),
  (5, 4, 4, '2025-04-25 10:05:00'),
  (6, 5, 5, '2025-04-26 12:00:00'),
  (7, 6, 6, '2025-04-26 15:30:00'),
  (8, 6, 1, '2025-04-26 16:00:00'),
  (9, 7, 7, '2025-04-27 08:45:00'),
  (10, 9, 8, '2025-04-28 10:20:00'),
  (11, 10, 2, '2025-04-28 19:50:00'),
  (12, 10, 9, '2025-04-28 20:00:00'),
  (13, 11, 10, '2025-04-29 09:10:00'),
  (14, 12, 3, '2025-04-29 13:30:00'),
  (15, 14, 5, '2025-04-30 11:00:00'),
  (16, 14, 6, '2025-04-30 11:05:00'),
  (17, 1, 8, '2025-04-25 13:00:00'),
  (18, 23, 1, '2025-05-10 10:00:00'),
  (19, 23, 2, '2025-05-10 10:05:00'),
  (20, 24, 7, '2025-05-11 14:00:00'),
  (21, 25, 8, '2025-05-12 18:00:00'),
  (22, 26, 4, '2025-04-25 15:00:00'),
  (23, 27, 5, '2025-04-25 16:30:00'),
  (24, 3, 2, '2025-04-25 10:30:00'),
  (25, 20, 1, '2025-05-03 10:00:00'),
  (26, 20, 2, '2025-05-03 10:05:00'),
  (27, 20, 3, '2025-05-03 10:10:00'),
  (28, 24, 4, '2025-05-11 15:00:00'),
  (29, 24, 5, '2025-05-11 15:05:00'),
  (30, 28, 9, '2025-05-14 17:00:00'),
  (31, 29, 10, '2025-05-15 19:00:00'),
  (32, 30, 6, '2025-05-16 10:00:00'),
  (33, 16, 1, '2025-05-01 10:00:00'),
  (34, 17, 2, '2025-05-02 10:00:00'),
  (35, 18, 3, '2025-05-02 10:00:00');
""")

"""# **Execução das queries**

### **Queries A1-A10**
"""

query_a1 = """
  SELECT titulo
  FROM filmes AS f
  WHERE f.genero = 'Acao'
"""

printQuery(query_a1)

query_a2 = """
  SELECT nome
  FROM salas AS s
  WHERE s.capacidade > 100
"""

printQuery(query_a2)

query_a3 = """
  SELECT f.titulo, s.preco_ingresso
  FROM filmes AS f
  INNER JOIN sessoes AS s ON s.filme_id = f.id
"""

printQuery(query_a3)

query_a4 = """
  SELECT nome
  FROM clientes AS c
  INNER JOIN ingressos AS i ON c.id = i.cliente_id
"""

printQuery(query_a4)

query_a5 = """
  SELECT titulo
  FROM filmes AS f
  WHERE f.classificacao_indicativa > 16
"""
# Foi colocado "SELECT titulo" ao invés de "SELECT nome" pois senão daria erro.

printQuery(query_a5)

query_a6 = """
  SELECT nome, data_compra
  FROM clientes AS c
  INNER JOIN ingressos AS i ON c.id = i.cliente_id
  INNER JOIN sessoes AS s ON i.sessao_id = s.id
"""

printQuery(query_a6)

query_a7 = """
  SELECT titulo
  FROM filmes AS f
  INNER JOIN sessoes AS s ON f.id = s.filme_id
"""

printQuery(query_a7)

query_a8 = """
  SELECT id
  FROM sessoes
  WHERE CAST(data_hora AS VARCHAR) LIKE '2025-04-25%'
"""
# O CAST não é necessário em mySQL, mas no duckdb é.

printQuery(query_a8)

query_a9 = """
  SELECT cliente_id, COUNT(*)
  FROM ingressos
  GROUP BY cliente_id
"""

printQuery(query_a9)

query_a10 = """
  SELECT titulo FROM filmes AS f
  INNER JOIN sessoes AS s ON f.id = s.filme_id
  INNER JOIN ingressos AS i ON s.id = i.sessao_id
"""

printQuery(query_a10)

"""### **Queries B1-B10**"""

query_b1 = """
  SELECT titulo
  FROM filmes
  WHERE genero LIKE 'Comedia'
"""

printQuery(query_b1)

query_b2 = """
  SELECT nome
  FROM salas
  WHERE capacidade > 150
"""

printQuery(query_b2)

query_b3 = """
  SELECT id, filme_id, sala_id, data_hora
  FROM sessoes
  WHERE STRFTIME('%H:%M:%S', data_hora) > '18:00:00'
"""

printQuery(query_b3)

query_b4 = """
  SELECT c.id, c.nome, COUNT(*) AS qtde_ingressos
  FROM clientes AS c
  INNER JOIN ingressos AS i ON c.id = i.cliente_id
  GROUP BY c.id, c.nome
  HAVING qtde_ingressos > 2
  ORDER BY c.id
"""

printQuery(query_b4)

query_b5 = """
  SELECT AVG(preco_ingressos) AS average
  FROM (SELECT
          s.id AS sessao_id,
          s.preco_ingresso AS preco_ingressos
        FROM sessoes AS s)

"""
# Obs: O enunciado ficou ambíguo, foi isso o que eu entendi:
# Seria a média dos preços de todas as sessões?

printQuery(query_b5)

query_b6 = """
  SELECT s.id AS id_sessao, COUNT(i.sessao_id) AS qtde_ingressos
  FROM sessoes AS s
  LEFT JOIN ingressos AS i ON s.id = i.sessao_id
  GROUP BY s.id
  HAVING qtde_ingressos = 0
"""

printQuery(query_b6)

query_b7 = """
  SELECT f.id, f.titulo, COUNT(s.id) AS qtde_sessoes
  FROM filmes AS f
  INNER JOIN sessoes AS s ON f.id = s.filme_id
  GROUP BY f.id, f.titulo
  HAVING COUNT(s.id) > 3
"""

printQuery(query_b7)

query_b8 = """
  SELECT c.id, c.nome,
  FROM clientes AS c
  INNER JOIN ingressos AS i ON c.id = i.cliente_id
  INNER JOIN sessoes AS s ON i.sessao_id = s.id
  INNER JOIN filmes AS f ON s.filme_id = f.id
  WHERE f.genero = 'Drama'
  GROUP BY c.id, c.nome
"""

printQuery(query_b8)

query_b9 = """
  SELECT s.id, s.data_hora, s.filme_id, f.titulo
  FROM sessoes AS s
  INNER JOIN filmes AS f ON s.filme_id = f.id
  WHERE f.titulo = 'Vingadores: Ultimato'
"""

printQuery(query_b9)

query_b10 = """
  SELECT data, qtde_ingressos
  FROM (SELECT STRFTIME('%Y/%m/%d', i.data_compra) AS data , COUNT(*) AS qtde_ingressos
        FROM ingressos AS i
        GROUP BY data)
  WHERE qtde_ingressos = (SELECT MAX(qtde_ingressos)
                          FROM (SELECT STRFTIME('%Y/%m/%d', i.data_compra) AS data , COUNT(*) AS qtde_ingressos
                                FROM ingressos AS i
                                GROUP BY data
                               )
                         )
"""

printQuery(query_b10)